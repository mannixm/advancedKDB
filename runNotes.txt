///////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////     CLONING GIT REPO       /////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

To clone the repository into your linux envirnoment. run:

git clone https://github.com/mannixm/advancedKDB.git

This will create a folder called "advancedKDB"

///////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////     EXERCISE 1 - TICK       /////////////////////////////
////////////////////////////////////////  ///////////////////////////////////////////////

To start the tickerplant, first ensure there are no processes running on the port we have chosen to use: 6000, you can always change this port for another in AdvancedKDB/scripts/config

Also in scripts/config.sh, make sure Q (the q home directory) and q (the q executable has been set)

To start the processes run (you will get the option of which ones you would like to start):

bash start.sh

To test the processes run  (you will get the option of which ones you would like to stop):

bash stop.sh

To test the processes run:

bash test.sh
____________________________________

The tickerplant logs will be in the folder scripts

_____________________________________

Tickerplant log replay:

q IBMtrade.q scripts/sym2022.05.16

____________________________________

CSV Reader:

q CSVReader.q trade trade.csv 6000

____________________________________

For E0D process:

q hdb.q ../scripts/sym2022.05.16

____________________________________

With the tickerplant running, edit the hostname and port to the ones you are using in: advancedKDB/blob/main/question3/websocket.html

Open websocket.html in a browser, connect and type in the name of the ticker you are searching for e.g. GS.N
_____________________________________

///////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////   EXERCISE 2 - DEBUGGING    /////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////   EXERCISE 2 - PART 1    /////////////////////////////
QUESTION: The below tickerplant log contains and error. a) Locate the error b) Fix the error Show how each was performed

LINK TO ANSWER: https://github.com/mannixm/advancedKDB/blob/main/question2/db/tplogIssues.txt


/////////////////////////////   EXERCISE 2 - PART 2    /////////////////////////////

QUESTION: The 3 tables in the below zip file contain errors. Try to ascertain the error and recommend a suitable fix for each.

LINK TO ANSWER: https://github.com/mannixm/advancedKDB/blob/main/question2/db/fileIssues.txt

/////////////////////////////   EXERCISE 2 - PART 3    /////////////////////////////

QUESTION: In your current system you have a historical database and a single hdb kdb+ instance to host user queries. Users are complaining about slowness. What is the probable cause of the slowness and suggest 2 changes that could be made to alleviate the problem. Maintain a single entry point to the system if possible

LINK TO ANSWER: https://github.com/mannixm/advancedKDB/blob/main/question2/db/fasterhdb.txt

/////////////////////////////   EXERCISE 2 - PART 4    /////////////////////////////

QUESTION: Improve the performance of function StringtoDate:{[x]{$[10h~abs type x;x:"D"$x;-14h~ type x;x:x;`date$x]}'[x]} given input: raze 500000#enlist("2010.01.01";2010.01.02). Do not use .Q.fu.

LINK TO ANSWER: https://github.com/mannixm/advancedKDB/blob/main/question2/db/fasterquery.txt



///////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////      EXERCISE 3 - API       /////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

For the python API navigate to:

advancedKDB/question3/pythonAPI/

Change the hostname and port and csv filepath to match the setup you have been using in: advancedKDB/question3/pythonAPI/CSVReader.py

python CSVReader.py

____________________________________

For the java API navigate to:

advancedKDB/question3/javaApi/

Change the hostname and port and csv filepath to match the setup you have been using in advancedKDB/question3/javaApi/src/main/java/kx/examples/Feed.java

javac -d build/classes src/main/java/kx/c.java
javac -d build/classes -cp build/classes src/main/java/kx/examples/Feed.java
java -cp build/classes kx.examples.Feed

____________________________________




